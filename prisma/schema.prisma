generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId      String         @unique
  email        String         @unique
  firstname    String?
  lastname     String?
  createdAt    DateTime       @default(now())
  automations  Automation[]
  integrations Integrations[]
  subscription Subscription?
}

model Subscription {
  id                            String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                        String?              @unique @db.Uuid
  createdAt                     DateTime             @default(now())
  plan                          SUBSCRIPTION_PLAN    @default(FREE)
  updatedAt                     DateTime             @default(now())
  customerId                    String?              @unique @map("customer_id")
  lemonSqueezyCustomerPortalUrl String?
  subscriptionStatus            SUBSCRIPTION_STATUS?
  User                          User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Integrations {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        INTEGRATIONS @default(INSTAGRAM)
  createdAt   DateTime     @default(now())
  userId      String?      @db.Uuid
  token       String       @unique
  expiresAt   DateTime?
  instagramId String?      @unique
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Automation {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String           @default("Untitled")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  active    Boolean          @default(false)
  userId    String?          @db.Uuid
  config    Json?
  status    AutomationStatus @default(DRAFT)
  User      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  dms       Dms[]
  listener  Listener?
  trigger   Trigger[]
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
  Automation   Automation? @relation(fields: [automationId], references: [id])
}

model Post {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId    String
  mediaType MEDIATYPE @default(IMAGE)
  mediaUrl  String
  caption   String?
  triggerId String
  trigger   Trigger   @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@index([triggerId])
}

model Listener {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId String        @unique @db.Uuid
  type         ACTION_TYPE   @default(MESSAGE)
  status       ACTION_STATUS @default(UNCONFIGURED)
  prompt       String?
  message      String?
  commentReply String?
  dmCount      Int           @default(0)
  commentCount Int           @default(0)
  metadata     Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Automation   Automation    @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Trigger {
  id            String   @id @default(cuid())
  type          String
  status        String   @default("unconfigured")
  automationId  String?  @db.Uuid
  automation    Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  posts         Post[]
  keywords      Keyword[]
  replyMessages ReplyMessage[]
  config        Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([automationId, type])
  @@index([automationId])
}

model Keyword {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word      String
  triggerId String
  trigger   Trigger @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@unique([triggerId, word])
  @@index([triggerId])
}

model ReplyMessage {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message   String
  triggerId String
  trigger   Trigger @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@index([triggerId])
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  OMNIAI
  MESSAGE
}

enum SUBSCRIPTION_STATUS {
  ACTIVE
  PAST_DUE
  CANCEL_AT_PERIOD_END
  DELETED
}

enum AutomationStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ACTION_TYPE {
  MESSAGE
  OMNIAI
}

enum ACTION_STATUS {
  UNCONFIGURED
  CONFIGURED
  COMPLETED
}
